import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;

public class MainApp extends Application {

    private Portfolio portfolio = new Portfolio();
    private StockQuoteService quoteService = new StockQuoteService();

    //Interface Controls
    private ListView<Holding> holdingsListView = new ListView<>();
    private TextField symbolField = new TextField();
    private Label priceLabel = new Label("Price: ");
    private Label changeLabel = new Label("Change: ");
    private Label nameLabel = new Label("Name: ");
    private Button fetchButton = new Button("Fetch Quote");
    private Button buyButton = new Button("Buy");
    private Button sellButton = new Button("Sell");
    private TextField sharesField = new TextField("1");
    private Label cashLabel = new Label("Cash: $10000"); // Initial cash
    private double cash = 10000;

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Stock Simulator");

        // Left: Position list
        VBox leftBox = new VBox(10, new Label("Positions"), holdingsListView);
        leftBox.setPadding(new Insets(10));
        holdingsListView.setPrefWidth(200);
        refreshHoldings();

        // Right: Stock information and operations
        GridPane stockPane = new GridPane();
        stockPane.setHgap(10);
        stockPane.setVgap(10);
        stockPane.setPadding(new Insets(10));

        stockPane.add(new Label("Stock Code:"), 0, 0);
        stockPane.add(symbolField, 1, 0);
        stockPane.add(fetchButton, 2, 0);

        stockPane.add(nameLabel, 0, 1, 3, 1);
        stockPane.add(priceLabel, 0, 2);
        stockPane.add(changeLabel, 1, 2);
        stockPane.add(new Label("Number of shares purchased:"), 0, 3);
        stockPane.add(sharesField, 1, 3);
        HBox btnBox = new HBox(10, buyButton, sellButton);
        stockPane.add(btnBox, 0, 4, 3, 1);

        // Top: Cash Balance
        HBox topBox = new HBox(20, cashLabel);
        topBox.setPadding(new Insets(10));

        // Main interface layout
        BorderPane root = new BorderPane();
        root.setLeft(leftBox);
        root.setCenter(stockPane);
        root.setTop(topBox);

        // Button Events
        fetchButton.setOnAction(e -> fetchQuote());
        buyButton.setOnAction(e -> buyStock());
        sellButton.setOnAction(e -> sellStock());

        Scene scene = new Scene(root, 700, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /** Refresh the position list */
    private void refreshHoldings() {
        holdingsListView.getItems().setAll(portfolio.getHoldings());
    }

    /** Get stock quotes and display them */
    private void fetchQuote() {
        String symbol = symbolField.getText().trim().toUpperCase();
        if (symbol.isEmpty()) {
            showAlert("error", "Please enter the stock code");
            return;
        }
        try {
            StockQuote quote = quoteService.getQuote(symbol);
            nameLabel.setText("Name: " + quote.getCompanyName());
            priceLabel.setText("Price: $" + String.format("%.2f", quote.getLatestPrice()));
            changeLabel.setText("Change: " + String.format("%.2f", quote.getChangePercent() * 100) + "%");
        } catch (Exception e) {
            showAlert("error", "Failed to obtain stock information：" + e.getMessage());
        }
    }

    /** Buying stocks */
    private void buyStock() {
        String symbol = symbolField.getText().trim().toUpperCase();
        int shares;
        try {
            shares = Integer.parseInt(sharesField.getText().trim());
            if (shares <= 0) throw new NumberFormatException();
        } catch (NumberFormatException e) {
            showAlert("error", "Please enter a valid number of shares");
            return;
        }
        try {
            StockQuote quote = quoteService.getQuote(symbol);
            double price = quote.getLatestPrice();
            double totalCost = price * shares;
            if (totalCost > cash) {
                showAlert("error", "Insufficient cash balance");
                return;
            }
            // Execute a purchase
            portfolio.addHolding(new Holding(symbol, shares, price));
            cash -= totalCost;
            cashLabel.setText("Cash Balance: $" + String.format("%.2f", cash));
            refreshHoldings();
        } catch (Exception e) {
            showAlert("error", e.getMessage());
        }
    }

    /** Selling stocks */
    private void sellStock() {
        Holding selected = holdingsListView.getSelectionModel().getSelectedItem();
        if (selected == null) {
            showAlert("error", "Please select the stock you hold first");
            return;
        }
        String symbol = selected.getSymbol();
        int sharesToSell;
        try {
            sharesToSell = Integer.parseInt(sharesField.getText().trim());
            if (sharesToSell <= 0) throw new NumberFormatException();
        } catch (NumberFormatException e) {
            showAlert("error", "Please enter a valid number of shares");
            return;
        }
        if (sharesToSell > selected.getShares()) {
            showAlert("error", "Insufficient number of shares held");
            return;
        }
        try {
            StockQuote quote = quoteService.getQuote(symbol);
            double price = quote.getLatestPrice();
            double totalGain = price * sharesToSell;
            // Execute Sell
            portfolio.removeShares(symbol, sharesToSell);
            cash += totalGain;
            cashLabel.setText("Cash Balance: $" + String.format("%.2f", cash));
            refreshHoldings();
        } catch (Exception e) {
            showAlert("error", "Failed to sell：" + e.getMessage());
        }
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR, message, ButtonType.OK);
        alert.setTitle(title);
        alert.showAndWait();
    }

    public static void main(String[] args) {
        launch(args);
    }
}

