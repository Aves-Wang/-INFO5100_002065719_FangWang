//(a) Write a generic method to count the number of elements in a collection that have a specific property
import java.util.Collection;
import java.util.function.Predicate;

public class GenericMethods {
    // Generic method to count elements with specific property
    public static <T> long countElements(Collection<T> collection, Predicate<T> predicate) {
        return collection.stream()
                        .filter(predicate)
                        .count();
    }
    
    // Usage examples
    public static void main(String[] args) {
        // Example usage for counting odd numbers
        Predicate<Integer> isOdd = n -> n % 2 != 0;
        Collection<Integer> numbers = List.of(1, 2, 3, 4, 5);
        System.out.println("Odd numbers count: " + 
            countElements(numbers, isOdd));
        
        // Example usage for counting palindromes
        Predicate<String> isPalindrome = s -> 
            new StringBuilder(s).reverse().toString().equals(s);
        Collection<String> words = List.of("level", "hello", "radar");
        System.out.println("Palindromes count: " + 
            countElements(words, isPalindrome));
    }
}


//(b) Write a generic method to exchange the positions of two different elements in an array.
public class GenericMethods {
    // Generic method to swap array elements
    public static <T> void swapElements(T[] array, int index1, int index2) {
        if(index1 < 0 || index1 >= array.length || 
           index2 < 0 || index2 >= array.length) {
            throw new IndexOutOfBoundsException("Invalid indices");
        }
        
        T temp = array[index1];
        array[index1] = array[index2];
        array[index2] = temp;
    }
    
    // Usage example
    public static void main(String[] args) {
        Integer[] numbers = {1, 2, 3, 4, 5};
        swapElements(numbers, 1, 3);
        System.out.println("Swapped array: " + Arrays.toString(numbers));
    }
}


//(c) Write a generic method to find the maximal element in the range [begin, end) of a list.
import java.util.List;
import java.util.Comparator;
import java.util.NoSuchElementException;

public class GenericMethods {
    // Generic method to find maximal element in range
    public static <T extends Comparable<? super T>> T findMaxInRange(
            List<T> list, int begin, int end) {
        if(begin < 0 || end > list.size() || begin >= end) {
            throw new IndexOutOfBoundsException("Invalid range");
        }
        
        return list.subList(begin, end)
                .stream()
                .max(Comparator.naturalOrder())
                .orElseThrow(NoSuchElementException::new);
    }
    
    // Usage example
    public static void main(String[] args) {
        List<Integer> numbers = List.of(5, 3, 8, 2, 9, 1);
        System.out.println("Max in range [1,4): " + 
            findMaxInRange(numbers, 1, 4));
    }
}


//Combined implementation with all three methods
import java.util.*;
import java.util.function.Predicate;
import java.util.Comparator;

public class GenericMethods {

    // (a) Count elements with specific property
    public static <T> long countElements(Collection<T> collection, 
                                        Predicate<T> predicate) {
        return collection.stream()
                        .filter(predicate)
                        .count();
    }

    // (b) Swap elements in array
    public static <T> void swapElements(T[] array, int i, int j) {
        validateIndex(array.length, i);
        validateIndex(array.length, j);
        
        T temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }

    private static void validateIndex(int length, int index) {
        if(index < 0 || index >= length) {
            throw new IndexOutOfBoundsException(
                "Index " + index + " out of bounds for length " + length);
        }
    }

    // (c) Find maximum in range
    public static <T extends Comparable<? super T>> T findMaxInRange(
            List<T> list, int begin, int end) {
        validateRange(list.size(), begin, end);
        
        return list.subList(begin, end)
                .stream()
                .max(Comparator.naturalOrder())
                .orElseThrow(() -> new NoSuchElementException(
                    "No elements in range [" + begin + "," + end + ")"));
    }

    private static void validateRange(int size, int begin, int end) {
        if(begin < 0 || end > size || begin >= end) {
            throw new IndexOutOfBoundsException(
                "Invalid range [" + begin + "," + end + ") for size " + size);
        }
    }

    public static void main(String[] args) {
        // Test countElements
        Collection<Integer> numbers = List.of(1, 2, 3, 4, 5);
        System.out.println("Odd count: " + 
            countElements(numbers, n -> n % 2 != 0));
        
        // Test swapElements
        Integer[] arr = {1, 2, 3, 4};
        swapElements(arr, 0, 2);
        System.out.println("Swapped array: " + Arrays.toString(arr));
        
        // Test findMaxInRange
        List<Integer> values = List.of(5, 3, 8, 2, 9);
        System.out.println("Max in [1,4): " + 
            findMaxInRange(values, 1, 4));
    }
}

